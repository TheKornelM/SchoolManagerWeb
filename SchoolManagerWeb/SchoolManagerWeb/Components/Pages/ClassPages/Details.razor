@page "/classes/details"
@using Microsoft.EntityFrameworkCore
@using SchoolManagerModel.Entities
@inject IDbContextFactory<SchoolManagerModel.Persistence.SchoolDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<AuthorizeView Roles="Admin" Context="AuthContext">
    <Authorized>
        <h1>Details</h1>

        <div>
            <h2>Class</h2>
            <hr/>
            @if (currentClass is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <dl class="row">
                    <dt class="col-sm-2">Name</dt>
                    <dd class="col-sm-10">@currentClass.Name</dd>
                </dl>
                <div>
                    <a href="@($"/classes/edit?id={currentClass.Id}")">Edit</a> |
                    <a href="@($"/classes")">Back to List</a>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectNotFound/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Class? currentClass;

    [SupplyParameterFromQuery] private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        currentClass = await context.Classes.FirstOrDefaultAsync(m => m.Id == Id);

        if (currentClass is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

}
