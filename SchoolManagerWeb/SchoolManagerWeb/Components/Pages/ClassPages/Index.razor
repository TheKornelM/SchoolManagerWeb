@page "/classes"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SchoolManagerModel.Entities
@using SchoolManagerModel.Persistence
@implements IAsyncDisposable
@inject IDbContextFactory<SchoolDbContext> DbFactory

<PageTitle>Index</PageTitle>

<AuthorizeView Roles="Admin" Context="AuthContext">
    <Authorized>
        <h1>Classes</h1>

        <p>
            <a href="classes/create">Create New</a>
        </p>

        @if (Classes != null)
        {
            <QuickGrid Class="table" Items="Classes.AsQueryable()" TItem="Class">
                <PropertyColumn Property="@(x => x.Name)" Title="Class Name"/>
                <TemplateColumn Context="currentClass">
                    <a href="@($"classes/edit?id={currentClass.Id}")">Edit</a> |
                    <a href="@($"classes/details?id={currentClass.Id}")">Details</a> |
                    <a href="@($"classes/delete?id={currentClass.Id}")">Delete</a>
                </TemplateColumn>
            </QuickGrid>
        }
        else
        {
            <p>Loading...</p>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectNotFound/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private SchoolDbContext context = default!;
    private List<Class>? Classes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Classes = await context.Classes
            .OrderBy(x => x.Year)
            .ThenBy(x => x.SchoolClass)
            .ThenBy(x => x.Id)
            .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}