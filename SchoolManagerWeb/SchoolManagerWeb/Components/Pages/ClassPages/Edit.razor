@page "/classes/edit"
@using Microsoft.EntityFrameworkCore
@using SchoolManagerModel.Entities
@inject IDbContextFactory<SchoolManagerModel.Persistence.SchoolDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<AuthorizeView Roles="Admin" Context="AuthContext">
    <Authorized>
        <h1>Edit</h1>

        <h2>Class</h2>
        <hr/>
        @if (Class is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="row">
                <div class="col-md-4">
                    <EditForm method="post" Model="Class" OnValidSubmit="UpdateClass" FormName="edit" Enhance>
                        <DataAnnotationsValidator/>
                        <ValidationSummary role="alert"/>
                        <input type="hidden" name="Class.Id" value="@Class.Id"/>
                        <div class="mb-3">
                            <label for="name" class="form-label">Name:</label>
                            <InputText id="name" @bind-Value="Class.Name" class="form-control"/>
                            <ValidationMessage For="() => Class.Name" class="text-danger"/>
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                </div>
            </div>
        }

        <div>
            <a href="/classes">Back to List</a>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectNotFound/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [SupplyParameterFromQuery] private int Id { get; set; }

    [SupplyParameterFromForm] private Class? Class { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Class ??= await context.Classes.FirstOrDefaultAsync(m => m.Id == Id);

        if (Class is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateClass()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Class!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ClassExists(Class!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/classes");
    }

    private bool ClassExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Classes.Any(e => e.Id == id);
    }

}
