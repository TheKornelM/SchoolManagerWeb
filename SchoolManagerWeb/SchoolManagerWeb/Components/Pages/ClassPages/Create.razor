@page "/classes/create"
@using Microsoft.EntityFrameworkCore
@using SchoolManagerModel.Entities
@using SchoolManagerModel.Utils
@using SchoolManagerModel.Validators
@inject IDbContextFactory<SchoolManagerModel.Persistence.SchoolDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>
<AuthorizeView Roles="Admin" Context="AuthContext">
    <Authorized>
        <h1>Create</h1>

        <h2>Class</h2>
        <hr/>
        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="Class" OnValidSubmit="AddClass" FormName="create" Enhance>
                    <FluentValidationValidator Validator="ClassValidator"/>
                    <div class="mb-3">
                        <label for="year" class="form-label">Year:</label>
                        <RadzenNumeric id="year" @bind-Value="Class.Year" class="form-control" Min="1"/>
                        <ValidationMessage For="() => Class.Year" class="text-danger"/>
                    </div>
                    <div class="mb-3">
                        <label for="class" class="form-label">Class:</label>
                        <InputText id="class" @bind-Value="Class.SchoolClass" class="form-control"/>
                        <ValidationMessage For="() => Class.SchoolClass" class="text-danger"/>
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                </EditForm>
            </div>
        </div>

        <div>
            <a href="/classes">Back to List</a>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectNotFound/>
    </NotAuthorized>
</AuthorizeView>

@code {

    [SupplyParameterFromForm]
    private Class? Class { get; set; } = new()
    {
        Year = 1,
        SchoolClass = "A"
    };

    ClassValidator ClassValidator { get; set; } = new(UIResourceFactory.GetNewResource());

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddClass()
    {
        if (Class == null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        Class.SchoolClass = Class.SchoolClass.ToUpper();
        await using var context = DbFactory.CreateDbContext();
        context.Classes.Add(Class);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/classes");
    }

}
