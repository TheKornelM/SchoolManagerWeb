@page "/Register"
@using System.Runtime.InteropServices
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using SchoolManagerModel.Entities.UserModel
@using SchoolManagerModel.Managers
@using SchoolManagerModel.Entities
@using SchoolManagerModel.Utils
@using System.Text
@using System.Text.Encodings.Web

@inject NavigationManager NavigationManager
@inject HttpClient HttpClientFactory

<PageTitle>Register</PageTitle>

<AuthorizeView Roles="Admin" Context="AuthContext">
	<Authorized>
		<h1>Regisztráció (SSR)</h1>

		<div class="row">
			<div class="col-md-4">
				<StatusMessage Message="@Message" />
				<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" Context="EditContext">
					<DataAnnotationsValidator />
					<h2>Create a new account.</h2>
					<hr />
					<ValidationSummary class="text-danger" role="alert" />

					<!-- Username -->
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" placeholder="Username" />
						<label>Username</label>
						<ValidationMessage For="() => Input.Username" class="text-danger" />
					</div>

					<!-- Email -->
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" placeholder="Email" />
						<label>Email</label>
						<ValidationMessage For="() => Input.Email" class="text-danger" />
					</div>

					<!-- First Name -->
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="given-name" placeholder="First Name" />
						<label>First Name</label>
						<ValidationMessage For="() => Input.FirstName" class="text-danger" />
					</div>

					<!-- Last Name -->
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.LastName" class="form-control" autocomplete="family-name" placeholder="Last Name" />
						<label>Last Name</label>
						<ValidationMessage For="() => Input.LastName" class="text-danger" />
					</div>

					<!-- Password -->
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.Password" class="form-control" autocomplete="new-password" type="password" placeholder="Password" />
						<label>Password</label>
						<ValidationMessage For="() => Input.Password" class="text-danger" />
					</div>

					<!-- Confirm Password -->
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" type="password" placeholder="Confirm Password" />
						<label>Confirm Password</label>
						<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
					</div>

					<button type="submit" class="btn btn-primary w-100">Register</button>
				</EditForm>
			</div>
		</div>
	</Authorized>
	<NotAuthorized>
		<h1>404 Not Found</h1>
	</NotAuthorized>
</AuthorizeView>


@code {
	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();
	private List<Class> Classes { get; set; } = new();
	private List<SubjectSelection> Subjects { get; set; } = new();
	private string? SelectedClassId { get; set; } = string.Empty;

	private string? Message { get; set; }
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		//Classes = await ClassManager.GetClassesAsync();
	}

	private async Task RegisterUser(EditContext editContext)
	{
		/*if (Input.Role == "Student" && string.IsNullOrEmpty(SelectedClassId))
		{
			identityErrors = new[] { new IdentityError { Description = "Students must select a class." } };
			Message = identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";
			return;
		}*/

		// API call:
		//var client = HttpClientFactory.CreateClient("ServerAPI");
		var response = await HttpClientFactory.PostAsJsonAsync("user", Input);
		Message = response.ToString();
	}

	private class InputModel
	{
		[Required]
		[Display(Name = "Username")]
		public string Username { get; set; } = "";

		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

		[Required]
		[Display(Name = "First name")]
		public string FirstName { get; set; } = "";

		[Required]
		[Display(Name = "Last name")]
		public string LastName { get; set; } = "";

		[Required]
		[Display(Name = "Role")]
		public string Role { get; set; } = "Teacher";
	}

	private class SubjectSelection
	{
		public string Id { get; set; } = string.Empty;
		public string Name { get; set; } = string.Empty;
		public bool IsSelected { get; set; } = false;
	}

	private async Task RoleChanged()
	{
		if (!string.IsNullOrEmpty(Input.Role))
		{
			if (Input.Role == "Student")
			{
				SelectedClassId = null;
				Subjects.Clear();
				//Classes = await ClassManager.GetClassesAsync();
			}
			else
			{
				SelectedClassId = null;
				Subjects.Clear();
				Classes.Clear();
			}
		}
	}

	private async Task ClassChanged()
	{
		if (!string.IsNullOrEmpty(SelectedClassId))
		{
			//Subjects = await ClassManager.GetSubjectsForClassAsync(int.Parse(SelectedClassId));
		}
		else
		{
			Subjects.Clear();
		}
	}

	private async Task OnRoleChanged(ChangeEventArgs e)
	{
		await RoleChanged();
	}

	private async Task OnClassChanged(ChangeEventArgs e)
	{
		await ClassChanged();
	}
}
